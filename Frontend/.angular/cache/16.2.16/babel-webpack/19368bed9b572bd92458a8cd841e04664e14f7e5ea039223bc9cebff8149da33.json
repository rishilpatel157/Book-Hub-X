{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport { createPopper } from '@popperjs/core';\nimport instances from '../../dom/instances';\nvar Default = {\n  placement: 'bottom',\n  triggerType: 'click',\n  offsetSkidding: 0,\n  offsetDistance: 10,\n  delay: 300,\n  ignoreClickOutsideClass: false,\n  onShow: function () {},\n  onHide: function () {},\n  onToggle: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar Dropdown = /** @class */function () {\n  function Dropdown(targetElement, triggerElement, options, instanceOptions) {\n    if (targetElement === void 0) {\n      targetElement = null;\n    }\n    if (triggerElement === void 0) {\n      triggerElement = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetElement.id;\n    this._targetEl = targetElement;\n    this._triggerEl = triggerElement;\n    this._options = __assign(__assign({}, Default), options);\n    this._popperInstance = null;\n    this._visible = false;\n    this._initialized = false;\n    this.init();\n    instances.addInstance('Dropdown', this, this._instanceId, instanceOptions.override);\n  }\n  Dropdown.prototype.init = function () {\n    if (this._triggerEl && this._targetEl && !this._initialized) {\n      this._popperInstance = this._createPopperInstance();\n      this._setupEventListeners();\n      this._initialized = true;\n    }\n  };\n  Dropdown.prototype.destroy = function () {\n    var _this = this;\n    var triggerEvents = this._getTriggerEvents();\n    // Remove click event listeners for trigger element\n    if (this._options.triggerType === 'click') {\n      triggerEvents.showEvents.forEach(function (ev) {\n        _this._triggerEl.removeEventListener(ev, _this._clickHandler);\n      });\n    }\n    // Remove hover event listeners for trigger and target elements\n    if (this._options.triggerType === 'hover') {\n      triggerEvents.showEvents.forEach(function (ev) {\n        _this._triggerEl.removeEventListener(ev, _this._hoverShowTriggerElHandler);\n        _this._targetEl.removeEventListener(ev, _this._hoverShowTargetElHandler);\n      });\n      triggerEvents.hideEvents.forEach(function (ev) {\n        _this._triggerEl.removeEventListener(ev, _this._hoverHideHandler);\n        _this._targetEl.removeEventListener(ev, _this._hoverHideHandler);\n      });\n    }\n    this._popperInstance.destroy();\n    this._initialized = false;\n  };\n  Dropdown.prototype.removeInstance = function () {\n    instances.removeInstance('Dropdown', this._instanceId);\n  };\n  Dropdown.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  Dropdown.prototype._setupEventListeners = function () {\n    var _this = this;\n    var triggerEvents = this._getTriggerEvents();\n    this._clickHandler = function () {\n      _this.toggle();\n    };\n    // click event handling for trigger element\n    if (this._options.triggerType === 'click') {\n      triggerEvents.showEvents.forEach(function (ev) {\n        _this._triggerEl.addEventListener(ev, _this._clickHandler);\n      });\n    }\n    this._hoverShowTriggerElHandler = function (ev) {\n      if (ev.type === 'click') {\n        _this.toggle();\n      } else {\n        setTimeout(function () {\n          _this.show();\n        }, _this._options.delay);\n      }\n    };\n    this._hoverShowTargetElHandler = function () {\n      _this.show();\n    };\n    this._hoverHideHandler = function () {\n      setTimeout(function () {\n        if (!_this._targetEl.matches(':hover')) {\n          _this.hide();\n        }\n      }, _this._options.delay);\n    };\n    // hover event handling for trigger element\n    if (this._options.triggerType === 'hover') {\n      triggerEvents.showEvents.forEach(function (ev) {\n        _this._triggerEl.addEventListener(ev, _this._hoverShowTriggerElHandler);\n        _this._targetEl.addEventListener(ev, _this._hoverShowTargetElHandler);\n      });\n      triggerEvents.hideEvents.forEach(function (ev) {\n        _this._triggerEl.addEventListener(ev, _this._hoverHideHandler);\n        _this._targetEl.addEventListener(ev, _this._hoverHideHandler);\n      });\n    }\n  };\n  Dropdown.prototype._createPopperInstance = function () {\n    return createPopper(this._triggerEl, this._targetEl, {\n      placement: this._options.placement,\n      modifiers: [{\n        name: 'offset',\n        options: {\n          offset: [this._options.offsetSkidding, this._options.offsetDistance]\n        }\n      }]\n    });\n  };\n  Dropdown.prototype._setupClickOutsideListener = function () {\n    var _this = this;\n    this._clickOutsideEventListener = function (ev) {\n      _this._handleClickOutside(ev, _this._targetEl);\n    };\n    document.body.addEventListener('click', this._clickOutsideEventListener, true);\n  };\n  Dropdown.prototype._removeClickOutsideListener = function () {\n    document.body.removeEventListener('click', this._clickOutsideEventListener, true);\n  };\n  Dropdown.prototype._handleClickOutside = function (ev, targetEl) {\n    var clickedEl = ev.target;\n    // Ignore clicks on the trigger element (ie. a datepicker input)\n    var ignoreClickOutsideClass = this._options.ignoreClickOutsideClass;\n    var isIgnored = false;\n    if (ignoreClickOutsideClass) {\n      var ignoredClickOutsideEls = document.querySelectorAll(\".\".concat(ignoreClickOutsideClass));\n      ignoredClickOutsideEls.forEach(function (el) {\n        if (el.contains(clickedEl)) {\n          isIgnored = true;\n          return;\n        }\n      });\n    }\n    // Ignore clicks on the target element (ie. dropdown itself)\n    if (clickedEl !== targetEl && !targetEl.contains(clickedEl) && !this._triggerEl.contains(clickedEl) && !isIgnored && this.isVisible()) {\n      this.hide();\n    }\n  };\n  Dropdown.prototype._getTriggerEvents = function () {\n    switch (this._options.triggerType) {\n      case 'hover':\n        return {\n          showEvents: ['mouseenter', 'click'],\n          hideEvents: ['mouseleave']\n        };\n      case 'click':\n        return {\n          showEvents: ['click'],\n          hideEvents: []\n        };\n      case 'none':\n        return {\n          showEvents: [],\n          hideEvents: []\n        };\n      default:\n        return {\n          showEvents: ['click'],\n          hideEvents: []\n        };\n    }\n  };\n  Dropdown.prototype.toggle = function () {\n    if (this.isVisible()) {\n      this.hide();\n    } else {\n      this.show();\n    }\n    this._options.onToggle(this);\n  };\n  Dropdown.prototype.isVisible = function () {\n    return this._visible;\n  };\n  Dropdown.prototype.show = function () {\n    this._targetEl.classList.remove('hidden');\n    this._targetEl.classList.add('block');\n    this._targetEl.removeAttribute('aria-hidden');\n    // Enable the event listeners\n    this._popperInstance.setOptions(function (options) {\n      return __assign(__assign({}, options), {\n        modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [{\n          name: 'eventListeners',\n          enabled: true\n        }], false)\n      });\n    });\n    this._setupClickOutsideListener();\n    // Update its position\n    this._popperInstance.update();\n    this._visible = true;\n    // callback function\n    this._options.onShow(this);\n  };\n  Dropdown.prototype.hide = function () {\n    this._targetEl.classList.remove('block');\n    this._targetEl.classList.add('hidden');\n    this._targetEl.setAttribute('aria-hidden', 'true');\n    // Disable the event listeners\n    this._popperInstance.setOptions(function (options) {\n      return __assign(__assign({}, options), {\n        modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [{\n          name: 'eventListeners',\n          enabled: false\n        }], false)\n      });\n    });\n    this._visible = false;\n    this._removeClickOutsideListener();\n    // callback function\n    this._options.onHide(this);\n  };\n  Dropdown.prototype.updateOnShow = function (callback) {\n    this._options.onShow = callback;\n  };\n  Dropdown.prototype.updateOnHide = function (callback) {\n    this._options.onHide = callback;\n  };\n  Dropdown.prototype.updateOnToggle = function (callback) {\n    this._options.onToggle = callback;\n  };\n  return Dropdown;\n}();\nexport function initDropdowns() {\n  document.querySelectorAll('[data-dropdown-toggle]').forEach(function ($triggerEl) {\n    var dropdownId = $triggerEl.getAttribute('data-dropdown-toggle');\n    var $dropdownEl = document.getElementById(dropdownId);\n    if ($dropdownEl) {\n      var placement = $triggerEl.getAttribute('data-dropdown-placement');\n      var offsetSkidding = $triggerEl.getAttribute('data-dropdown-offset-skidding');\n      var offsetDistance = $triggerEl.getAttribute('data-dropdown-offset-distance');\n      var triggerType = $triggerEl.getAttribute('data-dropdown-trigger');\n      var delay = $triggerEl.getAttribute('data-dropdown-delay');\n      var ignoreClickOutsideClass = $triggerEl.getAttribute('data-dropdown-ignore-click-outside-class');\n      new Dropdown($dropdownEl, $triggerEl, {\n        placement: placement ? placement : Default.placement,\n        triggerType: triggerType ? triggerType : Default.triggerType,\n        offsetSkidding: offsetSkidding ? parseInt(offsetSkidding) : Default.offsetSkidding,\n        offsetDistance: offsetDistance ? parseInt(offsetDistance) : Default.offsetDistance,\n        delay: delay ? parseInt(delay) : Default.delay,\n        ignoreClickOutsideClass: ignoreClickOutsideClass ? ignoreClickOutsideClass : Default.ignoreClickOutsideClass\n      });\n    } else {\n      console.error(\"The dropdown element with id \\\"\".concat(dropdownId, \"\\\" does not exist. Please check the data-dropdown-toggle attribute.\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.Dropdown = Dropdown;\n  window.initDropdowns = initDropdowns;\n}\nexport default Dropdown;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}