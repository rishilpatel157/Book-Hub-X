{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n  defaultPosition: 0,\n  indicators: {\n    items: [],\n    activeClasses: 'bg-white dark:bg-gray-800',\n    inactiveClasses: 'bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800'\n  },\n  interval: 3000,\n  onNext: function () {},\n  onPrev: function () {},\n  onChange: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar Carousel = /** @class */function () {\n  function Carousel(carouselEl, items, options, instanceOptions) {\n    if (carouselEl === void 0) {\n      carouselEl = null;\n    }\n    if (items === void 0) {\n      items = [];\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : carouselEl.id;\n    this._carouselEl = carouselEl;\n    this._items = items;\n    this._options = __assign(__assign(__assign({}, Default), options), {\n      indicators: __assign(__assign({}, Default.indicators), options.indicators)\n    });\n    this._activeItem = this.getItem(this._options.defaultPosition);\n    this._indicators = this._options.indicators.items;\n    this._intervalDuration = this._options.interval;\n    this._intervalInstance = null;\n    this._initialized = false;\n    this.init();\n    instances.addInstance('Carousel', this, this._instanceId, instanceOptions.override);\n  }\n  /**\n   * initialize carousel and items based on active one\n   */\n  Carousel.prototype.init = function () {\n    var _this = this;\n    if (this._items.length && !this._initialized) {\n      this._items.map(function (item) {\n        item.el.classList.add('absolute', 'inset-0', 'transition-transform', 'transform');\n      });\n      // if no active item is set then first position is default\n      if (this.getActiveItem()) {\n        this.slideTo(this.getActiveItem().position);\n      } else {\n        this.slideTo(0);\n      }\n      this._indicators.map(function (indicator, position) {\n        indicator.el.addEventListener('click', function () {\n          _this.slideTo(position);\n        });\n      });\n      this._initialized = true;\n    }\n  };\n  Carousel.prototype.destroy = function () {\n    if (this._initialized) {\n      this._initialized = false;\n    }\n  };\n  Carousel.prototype.removeInstance = function () {\n    instances.removeInstance('Carousel', this._instanceId);\n  };\n  Carousel.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  Carousel.prototype.getItem = function (position) {\n    return this._items[position];\n  };\n  /**\n   * Slide to the element based on id\n   * @param {*} position\n   */\n  Carousel.prototype.slideTo = function (position) {\n    var nextItem = this._items[position];\n    var rotationItems = {\n      left: nextItem.position === 0 ? this._items[this._items.length - 1] : this._items[nextItem.position - 1],\n      middle: nextItem,\n      right: nextItem.position === this._items.length - 1 ? this._items[0] : this._items[nextItem.position + 1]\n    };\n    this._rotate(rotationItems);\n    this._setActiveItem(nextItem);\n    if (this._intervalInstance) {\n      this.pause();\n      this.cycle();\n    }\n    this._options.onChange(this);\n  };\n  /**\n   * Based on the currently active item it will go to the next position\n   */\n  Carousel.prototype.next = function () {\n    var activeItem = this.getActiveItem();\n    var nextItem = null;\n    // check if last item\n    if (activeItem.position === this._items.length - 1) {\n      nextItem = this._items[0];\n    } else {\n      nextItem = this._items[activeItem.position + 1];\n    }\n    this.slideTo(nextItem.position);\n    // callback function\n    this._options.onNext(this);\n  };\n  /**\n   * Based on the currently active item it will go to the previous position\n   */\n  Carousel.prototype.prev = function () {\n    var activeItem = this.getActiveItem();\n    var prevItem = null;\n    // check if first item\n    if (activeItem.position === 0) {\n      prevItem = this._items[this._items.length - 1];\n    } else {\n      prevItem = this._items[activeItem.position - 1];\n    }\n    this.slideTo(prevItem.position);\n    // callback function\n    this._options.onPrev(this);\n  };\n  /**\n   * This method applies the transform classes based on the left, middle, and right rotation carousel items\n   * @param {*} rotationItems\n   */\n  Carousel.prototype._rotate = function (rotationItems) {\n    // reset\n    this._items.map(function (item) {\n      item.el.classList.add('hidden');\n    });\n    // Handling the case when there is only one item\n    if (this._items.length === 1) {\n      rotationItems.middle.el.classList.remove('-translate-x-full', 'translate-x-full', 'translate-x-0', 'hidden', 'z-10');\n      rotationItems.middle.el.classList.add('translate-x-0', 'z-20');\n      return;\n    }\n    // left item (previously active)\n    rotationItems.left.el.classList.remove('-translate-x-full', 'translate-x-full', 'translate-x-0', 'hidden', 'z-20');\n    rotationItems.left.el.classList.add('-translate-x-full', 'z-10');\n    // currently active item\n    rotationItems.middle.el.classList.remove('-translate-x-full', 'translate-x-full', 'translate-x-0', 'hidden', 'z-10');\n    rotationItems.middle.el.classList.add('translate-x-0', 'z-30');\n    // right item (upcoming active)\n    rotationItems.right.el.classList.remove('-translate-x-full', 'translate-x-full', 'translate-x-0', 'hidden', 'z-30');\n    rotationItems.right.el.classList.add('translate-x-full', 'z-20');\n  };\n  /**\n   * Set an interval to cycle through the carousel items\n   */\n  Carousel.prototype.cycle = function () {\n    var _this = this;\n    if (typeof window !== 'undefined') {\n      this._intervalInstance = window.setInterval(function () {\n        _this.next();\n      }, this._intervalDuration);\n    }\n  };\n  /**\n   * Clears the cycling interval\n   */\n  Carousel.prototype.pause = function () {\n    clearInterval(this._intervalInstance);\n  };\n  /**\n   * Get the currently active item\n   */\n  Carousel.prototype.getActiveItem = function () {\n    return this._activeItem;\n  };\n  /**\n   * Set the currently active item and data attribute\n   * @param {*} position\n   */\n  Carousel.prototype._setActiveItem = function (item) {\n    var _a, _b;\n    var _this = this;\n    this._activeItem = item;\n    var position = item.position;\n    // update the indicators if available\n    if (this._indicators.length) {\n      this._indicators.map(function (indicator) {\n        var _a, _b;\n        indicator.el.setAttribute('aria-current', 'false');\n        (_a = indicator.el.classList).remove.apply(_a, _this._options.indicators.activeClasses.split(' '));\n        (_b = indicator.el.classList).add.apply(_b, _this._options.indicators.inactiveClasses.split(' '));\n      });\n      (_a = this._indicators[position].el.classList).add.apply(_a, this._options.indicators.activeClasses.split(' '));\n      (_b = this._indicators[position].el.classList).remove.apply(_b, this._options.indicators.inactiveClasses.split(' '));\n      this._indicators[position].el.setAttribute('aria-current', 'true');\n    }\n  };\n  Carousel.prototype.updateOnNext = function (callback) {\n    this._options.onNext = callback;\n  };\n  Carousel.prototype.updateOnPrev = function (callback) {\n    this._options.onPrev = callback;\n  };\n  Carousel.prototype.updateOnChange = function (callback) {\n    this._options.onChange = callback;\n  };\n  return Carousel;\n}();\nexport function initCarousels() {\n  document.querySelectorAll('[data-carousel]').forEach(function ($carouselEl) {\n    var interval = $carouselEl.getAttribute('data-carousel-interval');\n    var slide = $carouselEl.getAttribute('data-carousel') === 'slide' ? true : false;\n    var items = [];\n    var defaultPosition = 0;\n    if ($carouselEl.querySelectorAll('[data-carousel-item]').length) {\n      Array.from($carouselEl.querySelectorAll('[data-carousel-item]')).map(function ($carouselItemEl, position) {\n        items.push({\n          position: position,\n          el: $carouselItemEl\n        });\n        if ($carouselItemEl.getAttribute('data-carousel-item') === 'active') {\n          defaultPosition = position;\n        }\n      });\n    }\n    var indicators = [];\n    if ($carouselEl.querySelectorAll('[data-carousel-slide-to]').length) {\n      Array.from($carouselEl.querySelectorAll('[data-carousel-slide-to]')).map(function ($indicatorEl) {\n        indicators.push({\n          position: parseInt($indicatorEl.getAttribute('data-carousel-slide-to')),\n          el: $indicatorEl\n        });\n      });\n    }\n    var carousel = new Carousel($carouselEl, items, {\n      defaultPosition: defaultPosition,\n      indicators: {\n        items: indicators\n      },\n      interval: interval ? interval : Default.interval\n    });\n    if (slide) {\n      carousel.cycle();\n    }\n    // check for controls\n    var carouselNextEl = $carouselEl.querySelector('[data-carousel-next]');\n    var carouselPrevEl = $carouselEl.querySelector('[data-carousel-prev]');\n    if (carouselNextEl) {\n      carouselNextEl.addEventListener('click', function () {\n        carousel.next();\n      });\n    }\n    if (carouselPrevEl) {\n      carouselPrevEl.addEventListener('click', function () {\n        carousel.prev();\n      });\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.Carousel = Carousel;\n  window.initCarousels = initCarousels;\n}\nexport default Carousel;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}