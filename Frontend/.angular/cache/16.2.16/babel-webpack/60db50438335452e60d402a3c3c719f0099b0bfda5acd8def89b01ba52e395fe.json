{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nlet BookService = /*#__PURE__*/(() => {\n  class BookService {\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService;\n      this.url = 'http://localhost:8080';\n    }\n    uploadBook(books) {\n      const token = this.userService.getToken();\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      });\n      return this.http.post(`${this.url}/author/book`, books, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    uploadBookImage(image, bookId) {\n      const formData = new FormData();\n      formData.append('image', image);\n      const token = this.userService.getToken();\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${token}`\n      });\n      return this.http.post(`${this.url}/author/bookimage/${bookId}`, formData, {\n        headers,\n        responseType: 'number'\n      }).pipe(catchError(this.handleError));\n    }\n    uploadBookPDF(file, bookId) {\n      const formData = new FormData();\n      formData.append('file', file);\n      const token = this.userService.getToken();\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${token}`\n      });\n      return this.http.post(`${this.url}/author/bookpdf/${bookId}`, formData, {\n        headers,\n        responseType: 'number'\n      }).pipe(catchError(this.handleError));\n    }\n    getAuthorBooks() {\n      const token = this.userService.getToken();\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${token}`\n      });\n      return this.http.get(`${this.url}/author/books`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    getBookImage() {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.http.get(`${this.url}/author/bookImage`, {\n        headers,\n        responseType: 'arraybuffer'\n      }).pipe(catchError(this.handleError));\n    }\n    publishBook(id) {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.http.patch(`${this.url}/author/bookpublish/${id}`, {\n        headers,\n        responseType: 'text'\n      }).pipe(catchError(this.handleError));\n    }\n    unpublishBook(id) {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.http.patch(`${this.url}/author/bookunpublish/${id}`, {\n        headers,\n        responseType: 'text'\n      }).pipe(catchError(this.handleError));\n    }\n    deleteBook(id) {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.http.delete(`${this.url}/author/deletebook/${id}`, {\n        headers,\n        responseType: 'text'\n      }).pipe(catchError(this.handleError));\n    }\n    getPublishedBooks() {\n      return this.http.get(`${this.url}/publishedbooks`).pipe(catchError(this.handleError));\n    }\n    getPagedItems(page, size) {\n      const params = new HttpParams().set('page', page.toString()).set('size', size.toString());\n      return this.http.get(`${this.url}/paged`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    getAuthorPagedItems(page, size) {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      const params = new HttpParams().set('page', page.toString()).set('size', size.toString());\n      return this.http.get(`${this.url}/authorbookspaged`, {\n        headers,\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    getBookById(id) {\n      const token = localStorage.getItem('token'); // Retrieve JWT token\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n      return this.http.get(`${this.url}/book/${id}`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    downloadPdf(id) {\n      return this.http.get(`${this.url}/downloadpdf/${id}`, {\n        responseType: 'blob'\n      }).pipe(catchError(this.handleError));\n    }\n    getAllBook() {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.http.get(`${this.url}/booklist`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred!';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.error(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function BookService_Factory(t) {\n        return new (t || BookService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: BookService,\n        factory: BookService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return BookService;\n})();\nexport { BookService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}