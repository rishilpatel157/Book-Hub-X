{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport { createPopper } from '@popperjs/core';\nimport instances from '../../dom/instances';\nvar Default = {\n  placement: 'top',\n  offset: 10,\n  triggerType: 'hover',\n  onShow: function () {},\n  onHide: function () {},\n  onToggle: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar Popover = /** @class */function () {\n  function Popover(targetEl, triggerEl, options, instanceOptions) {\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (triggerEl === void 0) {\n      triggerEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._targetEl = targetEl;\n    this._triggerEl = triggerEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._popperInstance = null;\n    this._visible = false;\n    this._initialized = false;\n    this.init();\n    instances.addInstance('Popover', this, instanceOptions.id ? instanceOptions.id : this._targetEl.id, instanceOptions.override);\n  }\n  Popover.prototype.init = function () {\n    if (this._triggerEl && this._targetEl && !this._initialized) {\n      this._setupEventListeners();\n      this._popperInstance = this._createPopperInstance();\n      this._initialized = true;\n    }\n  };\n  Popover.prototype.destroy = function () {\n    var _this = this;\n    if (this._initialized) {\n      // remove event listeners associated with the trigger element and target element\n      var triggerEvents = this._getTriggerEvents();\n      triggerEvents.showEvents.forEach(function (ev) {\n        _this._triggerEl.removeEventListener(ev, _this._showHandler);\n        _this._targetEl.removeEventListener(ev, _this._showHandler);\n      });\n      triggerEvents.hideEvents.forEach(function (ev) {\n        _this._triggerEl.removeEventListener(ev, _this._hideHandler);\n        _this._targetEl.removeEventListener(ev, _this._hideHandler);\n      });\n      // remove event listeners for keydown\n      this._removeKeydownListener();\n      // remove event listeners for click outside\n      this._removeClickOutsideListener();\n      // destroy the Popper instance if you have one (assuming this._popperInstance is the Popper instance)\n      if (this._popperInstance) {\n        this._popperInstance.destroy();\n      }\n      this._initialized = false;\n    }\n  };\n  Popover.prototype.removeInstance = function () {\n    instances.removeInstance('Popover', this._instanceId);\n  };\n  Popover.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  Popover.prototype._setupEventListeners = function () {\n    var _this = this;\n    var triggerEvents = this._getTriggerEvents();\n    this._showHandler = function () {\n      _this.show();\n    };\n    this._hideHandler = function () {\n      setTimeout(function () {\n        if (!_this._targetEl.matches(':hover')) {\n          _this.hide();\n        }\n      }, 100);\n    };\n    triggerEvents.showEvents.forEach(function (ev) {\n      _this._triggerEl.addEventListener(ev, _this._showHandler);\n      _this._targetEl.addEventListener(ev, _this._showHandler);\n    });\n    triggerEvents.hideEvents.forEach(function (ev) {\n      _this._triggerEl.addEventListener(ev, _this._hideHandler);\n      _this._targetEl.addEventListener(ev, _this._hideHandler);\n    });\n  };\n  Popover.prototype._createPopperInstance = function () {\n    return createPopper(this._triggerEl, this._targetEl, {\n      placement: this._options.placement,\n      modifiers: [{\n        name: 'offset',\n        options: {\n          offset: [0, this._options.offset]\n        }\n      }]\n    });\n  };\n  Popover.prototype._getTriggerEvents = function () {\n    switch (this._options.triggerType) {\n      case 'hover':\n        return {\n          showEvents: ['mouseenter', 'focus'],\n          hideEvents: ['mouseleave', 'blur']\n        };\n      case 'click':\n        return {\n          showEvents: ['click', 'focus'],\n          hideEvents: ['focusout', 'blur']\n        };\n      case 'none':\n        return {\n          showEvents: [],\n          hideEvents: []\n        };\n      default:\n        return {\n          showEvents: ['mouseenter', 'focus'],\n          hideEvents: ['mouseleave', 'blur']\n        };\n    }\n  };\n  Popover.prototype._setupKeydownListener = function () {\n    var _this = this;\n    this._keydownEventListener = function (ev) {\n      if (ev.key === 'Escape') {\n        _this.hide();\n      }\n    };\n    document.body.addEventListener('keydown', this._keydownEventListener, true);\n  };\n  Popover.prototype._removeKeydownListener = function () {\n    document.body.removeEventListener('keydown', this._keydownEventListener, true);\n  };\n  Popover.prototype._setupClickOutsideListener = function () {\n    var _this = this;\n    this._clickOutsideEventListener = function (ev) {\n      _this._handleClickOutside(ev, _this._targetEl);\n    };\n    document.body.addEventListener('click', this._clickOutsideEventListener, true);\n  };\n  Popover.prototype._removeClickOutsideListener = function () {\n    document.body.removeEventListener('click', this._clickOutsideEventListener, true);\n  };\n  Popover.prototype._handleClickOutside = function (ev, targetEl) {\n    var clickedEl = ev.target;\n    if (clickedEl !== targetEl && !targetEl.contains(clickedEl) && !this._triggerEl.contains(clickedEl) && this.isVisible()) {\n      this.hide();\n    }\n  };\n  Popover.prototype.isVisible = function () {\n    return this._visible;\n  };\n  Popover.prototype.toggle = function () {\n    if (this.isVisible()) {\n      this.hide();\n    } else {\n      this.show();\n    }\n    this._options.onToggle(this);\n  };\n  Popover.prototype.show = function () {\n    this._targetEl.classList.remove('opacity-0', 'invisible');\n    this._targetEl.classList.add('opacity-100', 'visible');\n    // Enable the event listeners\n    this._popperInstance.setOptions(function (options) {\n      return __assign(__assign({}, options), {\n        modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [{\n          name: 'eventListeners',\n          enabled: true\n        }], false)\n      });\n    });\n    // handle click outside\n    this._setupClickOutsideListener();\n    // handle esc keydown\n    this._setupKeydownListener();\n    // Update its position\n    this._popperInstance.update();\n    // set visibility to true\n    this._visible = true;\n    // callback function\n    this._options.onShow(this);\n  };\n  Popover.prototype.hide = function () {\n    this._targetEl.classList.remove('opacity-100', 'visible');\n    this._targetEl.classList.add('opacity-0', 'invisible');\n    // Disable the event listeners\n    this._popperInstance.setOptions(function (options) {\n      return __assign(__assign({}, options), {\n        modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [{\n          name: 'eventListeners',\n          enabled: false\n        }], false)\n      });\n    });\n    // handle click outside\n    this._removeClickOutsideListener();\n    // handle esc keydown\n    this._removeKeydownListener();\n    // set visibility to false\n    this._visible = false;\n    // callback function\n    this._options.onHide(this);\n  };\n  Popover.prototype.updateOnShow = function (callback) {\n    this._options.onShow = callback;\n  };\n  Popover.prototype.updateOnHide = function (callback) {\n    this._options.onHide = callback;\n  };\n  Popover.prototype.updateOnToggle = function (callback) {\n    this._options.onToggle = callback;\n  };\n  return Popover;\n}();\nexport function initPopovers() {\n  document.querySelectorAll('[data-popover-target]').forEach(function ($triggerEl) {\n    var popoverID = $triggerEl.getAttribute('data-popover-target');\n    var $popoverEl = document.getElementById(popoverID);\n    if ($popoverEl) {\n      var triggerType = $triggerEl.getAttribute('data-popover-trigger');\n      var placement = $triggerEl.getAttribute('data-popover-placement');\n      var offset = $triggerEl.getAttribute('data-popover-offset');\n      new Popover($popoverEl, $triggerEl, {\n        placement: placement ? placement : Default.placement,\n        offset: offset ? parseInt(offset) : Default.offset,\n        triggerType: triggerType ? triggerType : Default.triggerType\n      });\n    } else {\n      console.error(\"The popover element with id \\\"\".concat(popoverID, \"\\\" does not exist. Please check the data-popover-target attribute.\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.Popover = Popover;\n  window.initPopovers = initPopovers;\n}\nexport default Popover;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}