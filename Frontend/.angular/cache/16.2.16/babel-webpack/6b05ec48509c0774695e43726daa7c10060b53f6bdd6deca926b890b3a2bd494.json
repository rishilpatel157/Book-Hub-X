{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/user.service\";\nimport * as i2 from \"../service/shared.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = function () {\n  return {\n    standalone: true\n  };\n};\nlet LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(userService, sharedService, router) {\n      this.userService = userService;\n      this.sharedService = sharedService;\n      this.router = router;\n      this.email = '';\n      this.password = '';\n      this.profilePictureData = null;\n      this.profilePictureBase64 = null;\n      this.isloggedIn = false;\n    }\n    onSubmit() {\n      console.log(this.password);\n      this.userService.login(this.email, this.password).subscribe(res => {\n        if (res) {\n          localStorage.setItem('token', res.headers.get('Authorization'));\n          alert('login Successfull');\n          // window.location.reload()\n          this.userService.getUser().subscribe(res => {\n            localStorage.setItem(\"userName\", res.body.firstName);\n          });\n          this.userService.getProfilePicture().subscribe(data => {\n            this.profilePictureData = data;\n            // Convert ArrayBuffer to Blob\n            const blob = new Blob([data], {\n              type: 'image/jpeg'\n            }); // Adjust the 'image/jpeg' type based on your image type\n            // Convert Blob to data URL\n            const reader = new FileReader();\n            reader.onloadend = () => {\n              this.profilePictureBase64 = reader.result;\n              localStorage.setItem('profileImage', this.profilePictureBase64);\n            };\n            reader.readAsDataURL(blob);\n            window.location.reload();\n          }, error => {\n            console.error('Error fetching profile picture:', error);\n          });\n          // this.sharedService.updateIsLoggedInStatus(true);\n        } else {\n          this.sharedService.updateIsLoggedInStatus(false);\n          alert('login Unsuccessfull');\n        }\n        this.router.navigate(['home']);\n      });\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(t) {\n        return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.SharedService), i0.ɵɵdirectiveInject(i3.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        inputs: {\n          isloggedIn: \"isloggedIn\"\n        },\n        decls: 11,\n        vars: 6,\n        consts: [[1, \"w-1/5\", \"container\", \"mx-auto\"], [1, \"mb-6\"], [\"for\", \"email\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-medium\", \"text-gray-900\", \"dark:text-white\"], [\"type\", \"email\", \"id\", \"email\", \"required\", \"\", 1, \"bg-gray-50\", \"border\", \"border-gray-300\", \"text-gray-900\", \"text-sm\", \"rounded-lg\", \"focus:ring-blue-500\", \"focus:border-blue-500\", \"block\", \"w-full\", \"p-2.5\", \"dark:bg-gray-700\", \"dark:border-gray-600\", \"dark:placeholder-gray-400\", \"dark:text-white\", \"dark:focus:ring-blue-500\", \"dark:focus:border-blue-500\", 3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\"], [\"for\", \"password\", 1, \"block\", \"mb-2\", \"text-sm\", \"font-medium\", \"text-gray-900\", \"dark:text-white\"], [\"type\", \"password\", \"id\", \"password\", \"required\", \"\", 1, \"bg-gray-50\", \"border\", \"border-gray-300\", \"text-gray-900\", \"text-sm\", \"rounded-lg\", \"focus:ring-blue-500\", \"focus:border-blue-500\", \"block\", \"w-full\", \"p-2.5\", \"dark:bg-gray-700\", \"dark:border-gray-600\", \"dark:placeholder-gray-400\", \"dark:text-white\", \"dark:focus:ring-blue-500\", \"dark:focus:border-blue-500\", 3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"text-white\", \"bg-blue-700\", \"hover:bg-blue-800\", \"focus:ring-4\", \"focus:outline-none\", \"focus:ring-blue-300\", \"font-medium\", \"rounded-lg\", \"text-sm\", \"w-full\", \"sm:w-auto\", \"px-5\", \"py-2.5\", \"text-center\", \"dark:bg-blue-600\", \"dark:hover:bg-blue-700\", \"dark:focus:ring-blue-800\", 3, \"click\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"label\", 2);\n            i0.ɵɵtext(3, \"Your email\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"input\", 3);\n            i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_4_listener($event) {\n              return ctx.email = $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n            i0.ɵɵtext(7, \"Your password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"input\", 5);\n            i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_8_listener($event) {\n              return ctx.password = $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"button\", 6);\n            i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_9_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵtext(10, \"Submit\");\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.email)(\"ngModelOptions\", i0.ɵɵpureFunction0(4, _c0));\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.password)(\"ngModelOptions\", i0.ɵɵpureFunction0(5, _c0));\n          }\n        },\n        dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm]\n      });\n    }\n  }\n  return LoginComponent;\n})();\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}