{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n  minValue: null,\n  maxValue: null,\n  onIncrement: function () {},\n  onDecrement: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar InputCounter = /** @class */function () {\n  function InputCounter(targetEl, incrementEl, decrementEl, options, instanceOptions) {\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (incrementEl === void 0) {\n      incrementEl = null;\n    }\n    if (decrementEl === void 0) {\n      decrementEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._targetEl = targetEl;\n    this._incrementEl = incrementEl;\n    this._decrementEl = decrementEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._initialized = false;\n    this.init();\n    instances.addInstance('InputCounter', this, this._instanceId, instanceOptions.override);\n  }\n  InputCounter.prototype.init = function () {\n    var _this = this;\n    if (this._targetEl && !this._initialized) {\n      this._inputHandler = function (event) {\n        {\n          var target = event.target;\n          // check if the value is numeric\n          if (!/^\\d*$/.test(target.value)) {\n            // Regex to check if the value is numeric\n            target.value = target.value.replace(/[^\\d]/g, ''); // Remove non-numeric characters\n          }\n          // check for max value\n          if (_this._options.maxValue !== null && parseInt(target.value) > _this._options.maxValue) {\n            target.value = _this._options.maxValue.toString();\n          }\n          // check for min value\n          if (_this._options.minValue !== null && parseInt(target.value) < _this._options.minValue) {\n            target.value = _this._options.minValue.toString();\n          }\n        }\n      };\n      this._incrementClickHandler = function () {\n        _this.increment();\n      };\n      this._decrementClickHandler = function () {\n        _this.decrement();\n      };\n      // Add event listener to restrict input to numeric values only\n      this._targetEl.addEventListener('input', this._inputHandler);\n      if (this._incrementEl) {\n        this._incrementEl.addEventListener('click', this._incrementClickHandler);\n      }\n      if (this._decrementEl) {\n        this._decrementEl.addEventListener('click', this._decrementClickHandler);\n      }\n      this._initialized = true;\n    }\n  };\n  InputCounter.prototype.destroy = function () {\n    if (this._targetEl && this._initialized) {\n      this._targetEl.removeEventListener('input', this._inputHandler);\n      if (this._incrementEl) {\n        this._incrementEl.removeEventListener('click', this._incrementClickHandler);\n      }\n      if (this._decrementEl) {\n        this._decrementEl.removeEventListener('click', this._decrementClickHandler);\n      }\n      this._initialized = false;\n    }\n  };\n  InputCounter.prototype.removeInstance = function () {\n    instances.removeInstance('InputCounter', this._instanceId);\n  };\n  InputCounter.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  InputCounter.prototype.getCurrentValue = function () {\n    return parseInt(this._targetEl.value) || 0;\n  };\n  InputCounter.prototype.increment = function () {\n    // don't increment if the value is already at the maximum value\n    if (this._options.maxValue !== null && this.getCurrentValue() >= this._options.maxValue) {\n      return;\n    }\n    this._targetEl.value = (this.getCurrentValue() + 1).toString();\n    this._options.onIncrement(this);\n  };\n  InputCounter.prototype.decrement = function () {\n    // don't decrement if the value is already at the minimum value\n    if (this._options.minValue !== null && this.getCurrentValue() <= this._options.minValue) {\n      return;\n    }\n    this._targetEl.value = (this.getCurrentValue() - 1).toString();\n    this._options.onDecrement(this);\n  };\n  InputCounter.prototype.updateOnIncrement = function (callback) {\n    this._options.onIncrement = callback;\n  };\n  InputCounter.prototype.updateOnDecrement = function (callback) {\n    this._options.onDecrement = callback;\n  };\n  return InputCounter;\n}();\nexport function initInputCounters() {\n  document.querySelectorAll('[data-input-counter]').forEach(function ($targetEl) {\n    var targetId = $targetEl.id;\n    var $incrementEl = document.querySelector('[data-input-counter-increment=\"' + targetId + '\"]');\n    var $decrementEl = document.querySelector('[data-input-counter-decrement=\"' + targetId + '\"]');\n    var minValue = $targetEl.getAttribute('data-input-counter-min');\n    var maxValue = $targetEl.getAttribute('data-input-counter-max');\n    // check if the target element exists\n    if ($targetEl) {\n      if (!instances.instanceExists('InputCounter', $targetEl.getAttribute('id'))) {\n        new InputCounter($targetEl, $incrementEl ? $incrementEl : null, $decrementEl ? $decrementEl : null, {\n          minValue: minValue ? parseInt(minValue) : null,\n          maxValue: maxValue ? parseInt(maxValue) : null\n        });\n      }\n    } else {\n      console.error(\"The target element with id \\\"\".concat(targetId, \"\\\" does not exist. Please check the data-input-counter attribute.\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.InputCounter = InputCounter;\n  window.initInputCounters = initInputCounters;\n}\nexport default InputCounter;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}