{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n  onCollapse: function () {},\n  onExpand: function () {},\n  onToggle: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar Collapse = /** @class */function () {\n  function Collapse(targetEl, triggerEl, options, instanceOptions) {\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (triggerEl === void 0) {\n      triggerEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._targetEl = targetEl;\n    this._triggerEl = triggerEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._visible = false;\n    this._initialized = false;\n    this.init();\n    instances.addInstance('Collapse', this, this._instanceId, instanceOptions.override);\n  }\n  Collapse.prototype.init = function () {\n    var _this = this;\n    if (this._triggerEl && this._targetEl && !this._initialized) {\n      if (this._triggerEl.hasAttribute('aria-expanded')) {\n        this._visible = this._triggerEl.getAttribute('aria-expanded') === 'true';\n      } else {\n        // fix until v2 not to break previous single collapses which became dismiss\n        this._visible = !this._targetEl.classList.contains('hidden');\n      }\n      this._clickHandler = function () {\n        _this.toggle();\n      };\n      this._triggerEl.addEventListener('click', this._clickHandler);\n      this._initialized = true;\n    }\n  };\n  Collapse.prototype.destroy = function () {\n    if (this._triggerEl && this._initialized) {\n      this._triggerEl.removeEventListener('click', this._clickHandler);\n      this._initialized = false;\n    }\n  };\n  Collapse.prototype.removeInstance = function () {\n    instances.removeInstance('Collapse', this._instanceId);\n  };\n  Collapse.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  Collapse.prototype.collapse = function () {\n    this._targetEl.classList.add('hidden');\n    if (this._triggerEl) {\n      this._triggerEl.setAttribute('aria-expanded', 'false');\n    }\n    this._visible = false;\n    // callback function\n    this._options.onCollapse(this);\n  };\n  Collapse.prototype.expand = function () {\n    this._targetEl.classList.remove('hidden');\n    if (this._triggerEl) {\n      this._triggerEl.setAttribute('aria-expanded', 'true');\n    }\n    this._visible = true;\n    // callback function\n    this._options.onExpand(this);\n  };\n  Collapse.prototype.toggle = function () {\n    if (this._visible) {\n      this.collapse();\n    } else {\n      this.expand();\n    }\n    // callback function\n    this._options.onToggle(this);\n  };\n  Collapse.prototype.updateOnCollapse = function (callback) {\n    this._options.onCollapse = callback;\n  };\n  Collapse.prototype.updateOnExpand = function (callback) {\n    this._options.onExpand = callback;\n  };\n  Collapse.prototype.updateOnToggle = function (callback) {\n    this._options.onToggle = callback;\n  };\n  return Collapse;\n}();\nexport function initCollapses() {\n  document.querySelectorAll('[data-collapse-toggle]').forEach(function ($triggerEl) {\n    var targetId = $triggerEl.getAttribute('data-collapse-toggle');\n    var $targetEl = document.getElementById(targetId);\n    // check if the target element exists\n    if ($targetEl) {\n      if (!instances.instanceExists('Collapse', $targetEl.getAttribute('id'))) {\n        new Collapse($targetEl, $triggerEl);\n      } else {\n        // if instance exists already for the same target element then create a new one with a different trigger element\n        new Collapse($targetEl, $triggerEl, {}, {\n          id: $targetEl.getAttribute('id') + '_' + instances._generateRandomId()\n        });\n      }\n    } else {\n      console.error(\"The target element with id \\\"\".concat(targetId, \"\\\" does not exist. Please check the data-collapse-toggle attribute.\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.Collapse = Collapse;\n  window.initCollapses = initCollapses;\n}\nexport default Collapse;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}