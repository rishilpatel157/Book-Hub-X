{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n  placement: 'left',\n  bodyScrolling: false,\n  backdrop: true,\n  edge: false,\n  edgeOffset: 'bottom-[60px]',\n  backdropClasses: 'bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-30',\n  onShow: function () {},\n  onHide: function () {},\n  onToggle: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar Drawer = /** @class */function () {\n  function Drawer(targetEl, options, instanceOptions) {\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._eventListenerInstances = [];\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._targetEl = targetEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._visible = false;\n    this._initialized = false;\n    this.init();\n    instances.addInstance('Drawer', this, this._instanceId, instanceOptions.override);\n  }\n  Drawer.prototype.init = function () {\n    var _this = this;\n    // set initial accessibility attributes\n    if (this._targetEl && !this._initialized) {\n      this._targetEl.setAttribute('aria-hidden', 'true');\n      this._targetEl.classList.add('transition-transform');\n      // set base placement classes\n      this._getPlacementClasses(this._options.placement).base.map(function (c) {\n        _this._targetEl.classList.add(c);\n      });\n      this._handleEscapeKey = function (event) {\n        if (event.key === 'Escape') {\n          // if 'Escape' key is pressed\n          if (_this.isVisible()) {\n            // if the Drawer is visible\n            _this.hide(); // hide the Drawer\n          }\n        }\n      };\n      // add keyboard event listener to document\n      document.addEventListener('keydown', this._handleEscapeKey);\n      this._initialized = true;\n    }\n  };\n  Drawer.prototype.destroy = function () {\n    if (this._initialized) {\n      this.removeAllEventListenerInstances();\n      this._destroyBackdropEl();\n      // Remove the keyboard event listener\n      document.removeEventListener('keydown', this._handleEscapeKey);\n      this._initialized = false;\n    }\n  };\n  Drawer.prototype.removeInstance = function () {\n    instances.removeInstance('Drawer', this._instanceId);\n  };\n  Drawer.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  Drawer.prototype.hide = function () {\n    var _this = this;\n    // based on the edge option show placement classes\n    if (this._options.edge) {\n      this._getPlacementClasses(this._options.placement + '-edge').active.map(function (c) {\n        _this._targetEl.classList.remove(c);\n      });\n      this._getPlacementClasses(this._options.placement + '-edge').inactive.map(function (c) {\n        _this._targetEl.classList.add(c);\n      });\n    } else {\n      this._getPlacementClasses(this._options.placement).active.map(function (c) {\n        _this._targetEl.classList.remove(c);\n      });\n      this._getPlacementClasses(this._options.placement).inactive.map(function (c) {\n        _this._targetEl.classList.add(c);\n      });\n    }\n    // set accessibility attributes\n    this._targetEl.setAttribute('aria-hidden', 'true');\n    this._targetEl.removeAttribute('aria-modal');\n    this._targetEl.removeAttribute('role');\n    // enable body scroll\n    if (!this._options.bodyScrolling) {\n      document.body.classList.remove('overflow-hidden');\n    }\n    // destroy backdrop\n    if (this._options.backdrop) {\n      this._destroyBackdropEl();\n    }\n    this._visible = false;\n    // callback function\n    this._options.onHide(this);\n  };\n  Drawer.prototype.show = function () {\n    var _this = this;\n    if (this._options.edge) {\n      this._getPlacementClasses(this._options.placement + '-edge').active.map(function (c) {\n        _this._targetEl.classList.add(c);\n      });\n      this._getPlacementClasses(this._options.placement + '-edge').inactive.map(function (c) {\n        _this._targetEl.classList.remove(c);\n      });\n    } else {\n      this._getPlacementClasses(this._options.placement).active.map(function (c) {\n        _this._targetEl.classList.add(c);\n      });\n      this._getPlacementClasses(this._options.placement).inactive.map(function (c) {\n        _this._targetEl.classList.remove(c);\n      });\n    }\n    // set accessibility attributes\n    this._targetEl.setAttribute('aria-modal', 'true');\n    this._targetEl.setAttribute('role', 'dialog');\n    this._targetEl.removeAttribute('aria-hidden');\n    // disable body scroll\n    if (!this._options.bodyScrolling) {\n      document.body.classList.add('overflow-hidden');\n    }\n    // show backdrop\n    if (this._options.backdrop) {\n      this._createBackdrop();\n    }\n    this._visible = true;\n    // callback function\n    this._options.onShow(this);\n  };\n  Drawer.prototype.toggle = function () {\n    if (this.isVisible()) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n  Drawer.prototype._createBackdrop = function () {\n    var _a;\n    var _this = this;\n    if (!this._visible) {\n      var backdropEl = document.createElement('div');\n      backdropEl.setAttribute('drawer-backdrop', '');\n      (_a = backdropEl.classList).add.apply(_a, this._options.backdropClasses.split(' '));\n      document.querySelector('body').append(backdropEl);\n      backdropEl.addEventListener('click', function () {\n        _this.hide();\n      });\n    }\n  };\n  Drawer.prototype._destroyBackdropEl = function () {\n    if (this._visible && document.querySelector('[drawer-backdrop]') !== null) {\n      document.querySelector('[drawer-backdrop]').remove();\n    }\n  };\n  Drawer.prototype._getPlacementClasses = function (placement) {\n    switch (placement) {\n      case 'top':\n        return {\n          base: ['top-0', 'left-0', 'right-0'],\n          active: ['transform-none'],\n          inactive: ['-translate-y-full']\n        };\n      case 'right':\n        return {\n          base: ['right-0', 'top-0'],\n          active: ['transform-none'],\n          inactive: ['translate-x-full']\n        };\n      case 'bottom':\n        return {\n          base: ['bottom-0', 'left-0', 'right-0'],\n          active: ['transform-none'],\n          inactive: ['translate-y-full']\n        };\n      case 'left':\n        return {\n          base: ['left-0', 'top-0'],\n          active: ['transform-none'],\n          inactive: ['-translate-x-full']\n        };\n      case 'bottom-edge':\n        return {\n          base: ['left-0', 'top-0'],\n          active: ['transform-none'],\n          inactive: ['translate-y-full', this._options.edgeOffset]\n        };\n      default:\n        return {\n          base: ['left-0', 'top-0'],\n          active: ['transform-none'],\n          inactive: ['-translate-x-full']\n        };\n    }\n  };\n  Drawer.prototype.isHidden = function () {\n    return !this._visible;\n  };\n  Drawer.prototype.isVisible = function () {\n    return this._visible;\n  };\n  Drawer.prototype.addEventListenerInstance = function (element, type, handler) {\n    this._eventListenerInstances.push({\n      element: element,\n      type: type,\n      handler: handler\n    });\n  };\n  Drawer.prototype.removeAllEventListenerInstances = function () {\n    this._eventListenerInstances.map(function (eventListenerInstance) {\n      eventListenerInstance.element.removeEventListener(eventListenerInstance.type, eventListenerInstance.handler);\n    });\n    this._eventListenerInstances = [];\n  };\n  Drawer.prototype.getAllEventListenerInstances = function () {\n    return this._eventListenerInstances;\n  };\n  Drawer.prototype.updateOnShow = function (callback) {\n    this._options.onShow = callback;\n  };\n  Drawer.prototype.updateOnHide = function (callback) {\n    this._options.onHide = callback;\n  };\n  Drawer.prototype.updateOnToggle = function (callback) {\n    this._options.onToggle = callback;\n  };\n  return Drawer;\n}();\nexport function initDrawers() {\n  document.querySelectorAll('[data-drawer-target]').forEach(function ($triggerEl) {\n    // mandatory\n    var drawerId = $triggerEl.getAttribute('data-drawer-target');\n    var $drawerEl = document.getElementById(drawerId);\n    if ($drawerEl) {\n      var placement = $triggerEl.getAttribute('data-drawer-placement');\n      var bodyScrolling = $triggerEl.getAttribute('data-drawer-body-scrolling');\n      var backdrop = $triggerEl.getAttribute('data-drawer-backdrop');\n      var edge = $triggerEl.getAttribute('data-drawer-edge');\n      var edgeOffset = $triggerEl.getAttribute('data-drawer-edge-offset');\n      new Drawer($drawerEl, {\n        placement: placement ? placement : Default.placement,\n        bodyScrolling: bodyScrolling ? bodyScrolling === 'true' ? true : false : Default.bodyScrolling,\n        backdrop: backdrop ? backdrop === 'true' ? true : false : Default.backdrop,\n        edge: edge ? edge === 'true' ? true : false : Default.edge,\n        edgeOffset: edgeOffset ? edgeOffset : Default.edgeOffset\n      });\n    } else {\n      console.error(\"Drawer with id \".concat(drawerId, \" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?\"));\n    }\n  });\n  document.querySelectorAll('[data-drawer-toggle]').forEach(function ($triggerEl) {\n    var drawerId = $triggerEl.getAttribute('data-drawer-toggle');\n    var $drawerEl = document.getElementById(drawerId);\n    if ($drawerEl) {\n      var drawer_1 = instances.getInstance('Drawer', drawerId);\n      if (drawer_1) {\n        var toggleDrawer = function () {\n          drawer_1.toggle();\n        };\n        $triggerEl.addEventListener('click', toggleDrawer);\n        drawer_1.addEventListenerInstance($triggerEl, 'click', toggleDrawer);\n      } else {\n        console.error(\"Drawer with id \".concat(drawerId, \" has not been initialized. Please initialize it using the data-drawer-target attribute.\"));\n      }\n    } else {\n      console.error(\"Drawer with id \".concat(drawerId, \" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?\"));\n    }\n  });\n  document.querySelectorAll('[data-drawer-dismiss], [data-drawer-hide]').forEach(function ($triggerEl) {\n    var drawerId = $triggerEl.getAttribute('data-drawer-dismiss') ? $triggerEl.getAttribute('data-drawer-dismiss') : $triggerEl.getAttribute('data-drawer-hide');\n    var $drawerEl = document.getElementById(drawerId);\n    if ($drawerEl) {\n      var drawer_2 = instances.getInstance('Drawer', drawerId);\n      if (drawer_2) {\n        var hideDrawer = function () {\n          drawer_2.hide();\n        };\n        $triggerEl.addEventListener('click', hideDrawer);\n        drawer_2.addEventListenerInstance($triggerEl, 'click', hideDrawer);\n      } else {\n        console.error(\"Drawer with id \".concat(drawerId, \" has not been initialized. Please initialize it using the data-drawer-target attribute.\"));\n      }\n    } else {\n      console.error(\"Drawer with id \".concat(drawerId, \" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id\"));\n    }\n  });\n  document.querySelectorAll('[data-drawer-show]').forEach(function ($triggerEl) {\n    var drawerId = $triggerEl.getAttribute('data-drawer-show');\n    var $drawerEl = document.getElementById(drawerId);\n    if ($drawerEl) {\n      var drawer_3 = instances.getInstance('Drawer', drawerId);\n      if (drawer_3) {\n        var showDrawer = function () {\n          drawer_3.show();\n        };\n        $triggerEl.addEventListener('click', showDrawer);\n        drawer_3.addEventListenerInstance($triggerEl, 'click', showDrawer);\n      } else {\n        console.error(\"Drawer with id \".concat(drawerId, \" has not been initialized. Please initialize it using the data-drawer-target attribute.\"));\n      }\n    } else {\n      console.error(\"Drawer with id \".concat(drawerId, \" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.Drawer = Drawer;\n  window.initDrawers = initDrawers;\n}\nexport default Drawer;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}