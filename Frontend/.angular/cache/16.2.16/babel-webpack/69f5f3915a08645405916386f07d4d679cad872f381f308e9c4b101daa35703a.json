{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n  triggerType: 'hover',\n  onShow: function () {},\n  onHide: function () {},\n  onToggle: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar Dial = /** @class */function () {\n  function Dial(parentEl, triggerEl, targetEl, options, instanceOptions) {\n    if (parentEl === void 0) {\n      parentEl = null;\n    }\n    if (triggerEl === void 0) {\n      triggerEl = null;\n    }\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._parentEl = parentEl;\n    this._triggerEl = triggerEl;\n    this._targetEl = targetEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._visible = false;\n    this._initialized = false;\n    this.init();\n    instances.addInstance('Dial', this, this._instanceId, instanceOptions.override);\n  }\n  Dial.prototype.init = function () {\n    var _this = this;\n    if (this._triggerEl && this._targetEl && !this._initialized) {\n      var triggerEventTypes = this._getTriggerEventTypes(this._options.triggerType);\n      this._showEventHandler = function () {\n        _this.show();\n      };\n      triggerEventTypes.showEvents.forEach(function (ev) {\n        _this._triggerEl.addEventListener(ev, _this._showEventHandler);\n        _this._targetEl.addEventListener(ev, _this._showEventHandler);\n      });\n      this._hideEventHandler = function () {\n        if (!_this._parentEl.matches(':hover')) {\n          _this.hide();\n        }\n      };\n      triggerEventTypes.hideEvents.forEach(function (ev) {\n        _this._parentEl.addEventListener(ev, _this._hideEventHandler);\n      });\n      this._initialized = true;\n    }\n  };\n  Dial.prototype.destroy = function () {\n    var _this = this;\n    if (this._initialized) {\n      var triggerEventTypes = this._getTriggerEventTypes(this._options.triggerType);\n      triggerEventTypes.showEvents.forEach(function (ev) {\n        _this._triggerEl.removeEventListener(ev, _this._showEventHandler);\n        _this._targetEl.removeEventListener(ev, _this._showEventHandler);\n      });\n      triggerEventTypes.hideEvents.forEach(function (ev) {\n        _this._parentEl.removeEventListener(ev, _this._hideEventHandler);\n      });\n      this._initialized = false;\n    }\n  };\n  Dial.prototype.removeInstance = function () {\n    instances.removeInstance('Dial', this._instanceId);\n  };\n  Dial.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  Dial.prototype.hide = function () {\n    this._targetEl.classList.add('hidden');\n    if (this._triggerEl) {\n      this._triggerEl.setAttribute('aria-expanded', 'false');\n    }\n    this._visible = false;\n    // callback function\n    this._options.onHide(this);\n  };\n  Dial.prototype.show = function () {\n    this._targetEl.classList.remove('hidden');\n    if (this._triggerEl) {\n      this._triggerEl.setAttribute('aria-expanded', 'true');\n    }\n    this._visible = true;\n    // callback function\n    this._options.onShow(this);\n  };\n  Dial.prototype.toggle = function () {\n    if (this._visible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n  Dial.prototype.isHidden = function () {\n    return !this._visible;\n  };\n  Dial.prototype.isVisible = function () {\n    return this._visible;\n  };\n  Dial.prototype._getTriggerEventTypes = function (triggerType) {\n    switch (triggerType) {\n      case 'hover':\n        return {\n          showEvents: ['mouseenter', 'focus'],\n          hideEvents: ['mouseleave', 'blur']\n        };\n      case 'click':\n        return {\n          showEvents: ['click', 'focus'],\n          hideEvents: ['focusout', 'blur']\n        };\n      case 'none':\n        return {\n          showEvents: [],\n          hideEvents: []\n        };\n      default:\n        return {\n          showEvents: ['mouseenter', 'focus'],\n          hideEvents: ['mouseleave', 'blur']\n        };\n    }\n  };\n  Dial.prototype.updateOnShow = function (callback) {\n    this._options.onShow = callback;\n  };\n  Dial.prototype.updateOnHide = function (callback) {\n    this._options.onHide = callback;\n  };\n  Dial.prototype.updateOnToggle = function (callback) {\n    this._options.onToggle = callback;\n  };\n  return Dial;\n}();\nexport function initDials() {\n  document.querySelectorAll('[data-dial-init]').forEach(function ($parentEl) {\n    var $triggerEl = $parentEl.querySelector('[data-dial-toggle]');\n    if ($triggerEl) {\n      var dialId = $triggerEl.getAttribute('data-dial-toggle');\n      var $dialEl = document.getElementById(dialId);\n      if ($dialEl) {\n        var triggerType = $triggerEl.getAttribute('data-dial-trigger');\n        new Dial($parentEl, $triggerEl, $dialEl, {\n          triggerType: triggerType ? triggerType : Default.triggerType\n        });\n      } else {\n        console.error(\"Dial with id \".concat(dialId, \" does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?\"));\n      }\n    } else {\n      console.error(\"Dial with id \".concat($parentEl.id, \" does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.Dial = Dial;\n  window.initDials = initDials;\n}\nexport default Dial;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}