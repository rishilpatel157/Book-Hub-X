{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.url = 'http://localhost:8080';\n      this.tokenKey = 'jwtToken';\n    }\n    // registerUser(user: any): Observable<string> {\n    //   return this.http.post<any>(`${this.url}/users`, user, {\n    //     responseType: 'text' as 'json',\n    //   });\n    // }\n    registerUser(user) {\n      return this.http.post(`${this.url}/users`, user, {\n        observe: 'response',\n        responseType: 'text' // Expect text response\n      }).pipe(tap(response => {\n        const jwtToken = response.headers.get('Authorization');\n        if (jwtToken) {\n          localStorage.setItem('jwtToken', jwtToken); // Store the token\n          console.log('JWT stored:', jwtToken);\n        } else {\n          console.error('JWT not found in response headers.');\n        }\n      }),\n      // Now return the response body message\n      tap(response => console.log('Registration Message:', response.body)), tap(response => {\n        if (response.body === null) {\n          throw new Error('No Response Body');\n        }\n      }), map(response => response.body));\n    }\n    getJwtToken() {\n      return localStorage.getItem('jwtToken');\n    }\n    removeJwtToken() {\n      localStorage.removeItem('jwtToken');\n    }\n    uploadProfilePicture(file, email) {\n      const formData = new FormData();\n      formData.append('file', file);\n      return this.http.post(`${this.url}/upload/${email}`, formData, {\n        responseType: 'text'\n      });\n    }\n    login(email, password) {\n      const headers = new HttpHeaders({\n        Authorization: `Basic ${btoa(email + ':' + password)}`\n      });\n      return this.http.get(`${this.url}/signIn`, {\n        headers,\n        observe: 'response'\n      });\n    }\n    getUser() {\n      const token = this.getToken();\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${token}`\n      });\n      return this.http.get(`${this.url}/user`, {\n        headers\n      });\n    }\n    getProfilePicture() {\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${this.getToken()}`\n      });\n      return this.http.get(`${this.url}/profile-picture`, {\n        headers,\n        responseType: 'arraybuffer'\n      });\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    logout() {\n      localStorage.removeItem('token');\n    }\n    isLoggedIn() {\n      const token = localStorage.getItem('token');\n      return !!token;\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();\nexport { UserService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}